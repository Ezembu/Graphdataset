{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNvybAsYx0sH987OiPvaw3J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Kz2bSX2A01aR","executionInfo":{"status":"ok","timestamp":1684085973067,"user_tz":-60,"elapsed":5177,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3d814bd5-45d8-42d4-b869-248ca1634cc0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","openjdk-8-jdk-headless is already the newest version (8u362-ga-0ubuntu1~20.04.1).\n","0 upgraded, 0 newly installed, 0 to remove and 24 not upgraded.\n"]}],"source":["!apt-get install openjdk-8-jdk-headless"]},{"cell_type":"code","source":["\n","!wget https://archive.apache.org/dist/spark/spark-3.2.1/spark-3.2.1-bin-hadoop2.7.tgz"],"metadata":{"id":"l7d7HTMc7rYz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2dcbd97f-644c-402e-89ef-5045784a3f12","executionInfo":{"status":"ok","timestamp":1684085983873,"user_tz":-60,"elapsed":10816,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-05-14 17:39:33--  https://archive.apache.org/dist/spark/spark-3.2.1/spark-3.2.1-bin-hadoop2.7.tgz\n","Resolving archive.apache.org (archive.apache.org)... 138.201.131.134, 2a01:4f8:172:2ec5::2\n","Connecting to archive.apache.org (archive.apache.org)|138.201.131.134|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 272637746 (260M) [application/x-gzip]\n","Saving to: ‘spark-3.2.1-bin-hadoop2.7.tgz.1’\n","\n","spark-3.2.1-bin-had 100%[===================>] 260.01M  28.0MB/s    in 10s     \n","\n","2023-05-14 17:39:44 (25.6 MB/s) - ‘spark-3.2.1-bin-hadoop2.7.tgz.1’ saved [272637746/272637746]\n","\n"]}]},{"cell_type":"code","source":["!tar xf /content/spark-3.2.1-bin-hadoop2.7.tgz"],"metadata":{"id":"ZGPIH-MG8GLY","executionInfo":{"status":"ok","timestamp":1684085988577,"user_tz":-60,"elapsed":4744,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["!pip install -q findspark"],"metadata":{"id":"76ttJT4c0Y6j","executionInfo":{"status":"ok","timestamp":1684085993176,"user_tz":-60,"elapsed":4643,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.2.1-bin-hadoop2.7\""],"metadata":{"id":"f3jtG1yX0ZDt","executionInfo":{"status":"ok","timestamp":1684085993177,"user_tz":-60,"elapsed":60,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["import findspark\n","findspark.init()\n","findspark.find()"],"metadata":{"id":"b7uTX94n0ZGj","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1684085993177,"user_tz":-60,"elapsed":58,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"758a5619-3be0-4dd2-90a2-16d1099cbbaf"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/spark-3.2.1-bin-hadoop2.7'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["import pyspark\n","import numpy as np\n","import pandas as pd"],"metadata":{"id":"YmXjFUnD0ZUV","executionInfo":{"status":"ok","timestamp":1684085993178,"user_tz":-60,"elapsed":54,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["combined_data_df = pd.read_csv('/content/combined-data.csv')\n","combined_data_df['label'] = combined_data_df['avg_price'].apply(lambda x: 0 if x < 5 else 1)"],"metadata":{"id":"pKDDGazINxA0","executionInfo":{"status":"ok","timestamp":1684085993179,"user_tz":-60,"elapsed":54,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["counts = combined_data_df['label'].value_counts()\n","print(counts)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mAXg_qNwckYF","executionInfo":{"status":"ok","timestamp":1684085993180,"user_tz":-60,"elapsed":54,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"8a4dbf05-4efb-4338-ca44-dc06cb31652d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["1    3882\n","0     737\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","source":["counts = combined_data_df.groupby('platformType')['label'].value_counts()\n","print(counts)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kT2ftUALiPQU","executionInfo":{"status":"ok","timestamp":1684085993181,"user_tz":-60,"elapsed":50,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"fad382d6-9fd9-4255-f250-fa7b4d23a909"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["platformType  label\n","android       1        1229\n","              0         406\n","iphone        1        1901\n","              0          33\n","linux         1         159\n","              0          93\n","mac           1         150\n","              0          29\n","windows       1         443\n","              0         176\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","source":["combined_data_df = combined_data_df.dropna()"],"metadata":{"id":"kLl_EBgEOLcB","executionInfo":{"status":"ok","timestamp":1684085993182,"user_tz":-60,"elapsed":46,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["combined_data_df.head()"],"metadata":{"id":"7tICI7LdaQX1","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1684085993183,"user_tz":-60,"elapsed":45,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"a56a6781-9386-443e-ca6f-873a30a277e2"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    userId  userSessionId  teamLevel platformType  count_gameclicks  \\\n","4      937           5652          1      android                39   \n","11    1623           5659          1       iphone               129   \n","13      83           5661          1      android               102   \n","17     121           5665          1      android                39   \n","18     462           5666          1      android                90   \n","\n","    count_hits  count_buyId  avg_price  label  \n","4            0          1.0        1.0      0  \n","11           9          1.0       10.0      1  \n","13          14          1.0        5.0      1  \n","17           4          1.0        3.0      0  \n","18          10          1.0        3.0      0  "],"text/html":["\n","  <div id=\"df-7e619754-dae3-465f-9891-3ad74eb36583\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>userSessionId</th>\n","      <th>teamLevel</th>\n","      <th>platformType</th>\n","      <th>count_gameclicks</th>\n","      <th>count_hits</th>\n","      <th>count_buyId</th>\n","      <th>avg_price</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>937</td>\n","      <td>5652</td>\n","      <td>1</td>\n","      <td>android</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1623</td>\n","      <td>5659</td>\n","      <td>1</td>\n","      <td>iphone</td>\n","      <td>129</td>\n","      <td>9</td>\n","      <td>1.0</td>\n","      <td>10.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>83</td>\n","      <td>5661</td>\n","      <td>1</td>\n","      <td>android</td>\n","      <td>102</td>\n","      <td>14</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>121</td>\n","      <td>5665</td>\n","      <td>1</td>\n","      <td>android</td>\n","      <td>39</td>\n","      <td>4</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>462</td>\n","      <td>5666</td>\n","      <td>1</td>\n","      <td>android</td>\n","      <td>90</td>\n","      <td>10</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e619754-dae3-465f-9891-3ad74eb36583')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7e619754-dae3-465f-9891-3ad74eb36583 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e619754-dae3-465f-9891-3ad74eb36583');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["import pyspark.ml.feature\n","import pyspark.ml.classification \n","import pyspark.ml.evaluation\n","from pyspark.ml.feature import StringIndexer, OneHotEncoder\n","from pyspark.ml.feature import VectorAssembler\n","from pyspark.ml.classification import DecisionTreeClassifier\n","from pyspark.ml.classification import LogisticRegression\n","from pyspark.ml.classification import LinearSVC\n","from sklearn.metrics import confusion_matrix\n","from pyspark.ml.classification import NaiveBayes"],"metadata":{"id":"DaqB5y6bT2Uk","executionInfo":{"status":"ok","timestamp":1684085995176,"user_tz":-60,"elapsed":2036,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["from pyspark.sql import SparkSession\n","spark = SparkSession.builder.appName(\"example\").getOrCreate()\n","\n","# Assuming combined_data_df is a Pandas DataFrame object\n","spark_df = spark.createDataFrame(combined_data_df)\n","\n","# Apply the StringIndexer transformation\n","indexer = StringIndexer(inputCol='platformType', outputCol='platformType_1').fit(spark_df)\n","df = indexer.transform(spark_df)\n","\n","# Select the feature columns of interest\n","feature_columns = [\"teamLevel\", \"platformType_1\", \"count_gameclicks\", \"count_hits\", \"count_buyId\", \"avg_price\", \"label\"]\n","df = df.select(feature_columns)\n"],"metadata":{"id":"q_c81KoRVMln","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684086020640,"user_tz":-60,"elapsed":25473,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"a14c3c96-acaa-43aa-c4e6-5d3868fb7cb5"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/spark-3.2.1-bin-hadoop2.7/python/pyspark/sql/pandas/conversion.py:371: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n","  for column, series in pdf.iteritems():\n"]}]},{"cell_type":"code","source":["df.show()"],"metadata":{"id":"PYy3uYfeZ2sQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684086021281,"user_tz":-60,"elapsed":644,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"fcdae283-6bf7-4ad4-8b3d-39e401578f17"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+--------------+----------------+----------+-----------+---------+-----+\n","|teamLevel|platformType_1|count_gameclicks|count_hits|count_buyId|avg_price|label|\n","+---------+--------------+----------------+----------+-----------+---------+-----+\n","|        1|           1.0|              39|         0|        1.0|      1.0|    0|\n","|        1|           0.0|             129|         9|        1.0|     10.0|    1|\n","|        1|           1.0|             102|        14|        1.0|      5.0|    1|\n","|        1|           1.0|              39|         4|        1.0|      3.0|    0|\n","|        1|           1.0|              90|        10|        1.0|      3.0|    0|\n","|        1|           0.0|              51|         8|        1.0|     20.0|    1|\n","|        1|           1.0|              51|         6|        2.0|      2.5|    0|\n","|        1|           1.0|              47|         5|        2.0|      2.0|    0|\n","|        1|           1.0|              46|         7|        1.0|      1.0|    0|\n","|        1|           0.0|              41|         6|        1.0|     20.0|    1|\n","|        1|           1.0|              47|         7|        1.0|      3.0|    0|\n","|        1|           0.0|              76|         7|        1.0|     20.0|    1|\n","|        1|           1.0|              52|         2|        1.0|      3.0|    0|\n","|        1|           1.0|              62|         9|        1.0|      3.0|    0|\n","|        1|           0.0|             177|        25|        2.0|      7.5|    1|\n","|        1|           0.0|              54|         5|        1.0|     10.0|    1|\n","|        1|           1.0|              27|         4|        2.0|      4.0|    0|\n","|        1|           0.0|              37|         2|        1.0|     20.0|    1|\n","|        1|           1.0|              67|         5|        1.0|      1.0|    0|\n","|        1|           0.0|              37|         5|        2.0|     11.5|    1|\n","+---------+--------------+----------------+----------+-----------+---------+-----+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","source":["from pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator\n","assembler = VectorAssembler(inputCols=[\n","    \"teamLevel\", \n","    \"platformType_1\", \n","    \"count_gameclicks\", \n","    \"count_hits\", \n","    \"count_buyId\", \n","], outputCol='features')\n","\n","df_assembled = assembler.transform(df)\n","train, test = df_assembled.randomSplit([0.7, 0.3], seed = 2023)\n","lr = LogisticRegression(featuresCol=\"features\")\n","\n","lrmodel = lr.fit(train)\n","predictions_lr = lrmodel.transform(test)\n","\n","evaluator = BinaryClassificationEvaluator()\n","lr_accuracy = evaluator.evaluate(predictions_lr) \n","print(\"Test accuracy for logistic regression = \" + str(lr_accuracy))"],"metadata":{"id":"XVMbbuWsLZOl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684086030560,"user_tz":-60,"elapsed":9283,"user":{"displayName":"ezembu samuel","userId":"04100484304409210393"}},"outputId":"2337b819-6a7b-45af-f613-1cb25462646b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Test accuracy for logistic regression = 0.875333000333\n"]}]}]}